AWSTemplateFormatVersion: "2010-09-09"
 
Description: "CloudFormation Template for FLAC Transcription Project - create Transcription for your FLAC files."
 
Parameters:
  InputS3BucketName:
    Type: String
    Default: transcription-generator-input-s3bucket
    Description: Enter name of S3 Bucket for storing input files. Default is Transcription-generator-input-s3-bucket.
 
  FrontendSourceCodeS3BucketName:
    Type: String
    Default: transcription-generator-code-for-cloudformation
    Description: Enter name of S3 Bucket which contains the source code of frontend(.zip). Which will be used by Elastic Beanstalk.
 
  FrontendSourceCodeS3KeyName:
    Type: String
    Default: subtitle-generator-frontend.zip
    Description: Enter name of S3 Object Key of the source code of frontend(.zip). Which will be used by Elastic Beanstalk.
 
  SenderEmail:
    Type: String
    Default: 
    Description: Enter email from which you want to send emails to users for .srt files..
 
Resources:
  GenerateS3PresignedURLFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Role: arn:aws:iam::
      Handler: index.handler
      Environment:
        Variables:
          INPUT_BUCKET_NAME: !Ref InputS3BucketName
          SNS_TOPIC_ARN: !Ref SubtitlesSNSTopic
      Code:
        S3Bucket: transcription-generator-code-for-cloudformation
        S3Key: GenerateS3PresignedURLFunction.zip
      Description: "Generates a pre-signed URL for an S3 object, associating it with an email tag."
 
  CreateTranscriptionJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Role: arn:aws:iam::
      Handler: index.handler
      Environment:
        Variables:
          SEND_EMAIL_LAMBDA_ARN: !Ref SendEmailWithSubtitlesFunction
          API_KEY: ""
          GCS_BUCKET_NAME: "audio_bucket07"
      Code:
        S3Bucket: transcription-generator-code-for-cloudformation
        S3Key: CreateTranscriptionJobFunction.zip
      Description: "Creates a transcription job based on the S3 Object uploaded by the frontend. It is triggered by S3, when object upload is uploaded."
 
  SendEmailWithSubtitlesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Role: arn:aws:iam::
      Handler: index.handler
      Environment:
        Variables:
          SES_SENDER: !Ref SenderEmail
          SNS_TOPIC_ARN: !Ref SubtitlesSNSTopic
          S3_BUCKET_NAME: !Ref InputS3BucketName
      Code:
        S3Bucket: transcription-generator-code-for-cloudformation
        S3Key:  SendEmailWithSubtitlesFunction.zip
      Description: "Sends .srt file to the user in Email using SNS. It is triggered by EventBridge, once transcription job is completed."
 
  InputS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - "PermissionForS3ToInvokeLambda"
    Properties:
      BucketName: !Ref InputS3BucketName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - PUT
          - GET
          AllowedOrigins:
          - "*"
          Id: myCORSRuleId1
          MaxAge: 3600
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt CreateTranscriptionJobFunction.Arn
 
  PermissionForS3ToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTranscriptionJobFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${InputS3BucketName}"
      
  TranscribeToLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
        - aws.transcribe
        detail-type:
        - Transcribe Job State Change
        detail:
          TranscriptionJobStatus:
          - COMPLETED
      State: ENABLED
      Targets:
      - Id: "SendEmailLambdaTarget"
        Arn: !GetAtt SendEmailWithSubtitlesFunction.Arn
        
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendEmailWithSubtitlesFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscribeToLambdaEventRule.Arn
 
  GenerateS3PresignedURLLambdaRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GenerateS3PresignedURLLambdaRestApi
      Description: "API Gateway for GenerateS3PresignedURL Lambda Function"
      EndpointConfiguration:
        Types:
          - REGIONAL
 
  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GenerateS3PresignedURLLambdaRestApi
      ParentId: !GetAtt
      - GenerateS3PresignedURLLambdaRestApi
      - RootResourceId
      PathPart: "upload"
 
  UploadResourcePOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GenerateS3PresignedURLLambdaRestApi
      ResourceId: !Ref UploadResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateS3PresignedURLFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
 
  UploadResourceOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GenerateS3PresignedURLLambdaRestApi
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
 
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - UploadResourcePOST
    - UploadResourceOPTIONS
    Properties:
      RestApiId: !Ref GenerateS3PresignedURLLambdaRestApi
      Description: Prod Deployment
 
  Prod:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Prod Stage
      RestApiId: !Ref GenerateS3PresignedURLLambdaRestApi
      DeploymentId: !Ref Deployment
 
  SubtitlesSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Subtitles Notification Topic"
      TopicName: "SubtitlesNotificationTopic"
 
  SubtitlesSNSTopicEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref SenderEmail
      Protocol: email
      TopicArn: !Ref SubtitlesSNSTopic
 
  PermissionForAPIGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateS3PresignedURLFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GenerateS3PresignedURLLambdaRestApi}/*/POST/upload"
     
  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: "SubtitleGeneratorFrontend"
      Description: "Elastic Beanstalk Application for the Transcription Generator Frontend"
 
  EBAppVersion1:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: "Application version for frontend"
      SourceBundle:
        S3Bucket: !Ref FrontendSourceCodeS3BucketName
        S3Key: !Ref FrontendSourceCodeS3KeyName
 
  EBEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: "AWS Elastic Beanstalk Environment running Dockerized React frontend."
      EnvironmentName: prod
      CNAMEPrefix: SubtitleGenerator
      SolutionStackName: "64bit Amazon Linux 2023 v4.3.5 running Docker"
      VersionLabel: !Ref EBAppVersion1
      OptionSettings:
      - Namespace: 'aws:elasticbeanstalk:environment'
        OptionName: EnvironmentType
        Value: SingleInstance
      - Namespace: 'aws:autoscaling:launchconfiguration'
        OptionName: IamInstanceProfile
        Value: LabInstanceProfile
      - Namespace: 'aws:elasticbeanstalk:environment'
        OptionName: ServiceRole
        Value: LabRole
      - Namespace: 'aws:ec2:instances'
        OptionName: InstanceTypes
        Value: t3.medium
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: REACT_APP_API_GATEWAY_URL
        Value: !Sub "https://${GenerateS3PresignedURLLambdaRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Prod}/upload"

  # Enabling Guard Duty
  GuardDutyDetector:
    Type: "AWS::GuardDuty::Detector"
    Properties:
      Enable: true
      FindingPublishingFrequency: "FIFTEEN_MINUTES" 

Outputs:
  POSTUploadAPIGatewayURL:
    Description: "URL for the POST request to generate S3 pre-signed URLs"
    Value: !Sub "https://${GenerateS3PresignedURLLambdaRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Prod}/upload"
 
  BeanstalkFrontendURL:
    Description: "URL for the Elastic Beanstalk frontend application"
    Value: !Sub "http://SubtitleGenerator.${AWS::Region}.elasticbeanstalk.com"